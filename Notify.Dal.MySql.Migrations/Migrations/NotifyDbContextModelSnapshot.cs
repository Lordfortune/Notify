// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notify.Dal.Mysql;
using Notify.Enums;

namespace Notify.Dal.MySql.Migrations.Migrations
{
    [DbContext(typeof(NotifyDbContext))]
    partial class NotifyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Notify.Dal.Models.EmailNotificatorSettingsDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("DefaultSubject")
                        .HasColumnName("DefaultSubject");

                    b.Property<string>("Host")
                        .HasColumnName("Host");

                    b.Property<string>("Password")
                        .HasColumnName("Password");

                    b.Property<int>("Port")
                        .HasColumnName("Port");

                    b.Property<string>("SenderAddress")
                        .HasColumnName("SenderAddress");

                    b.Property<string>("SenderName")
                        .HasColumnName("SenderName");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.ToTable("EmailNotificatorSettings");
                });

            modelBuilder.Entity("Notify.Dal.Models.NotificatorDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<string>("Slug")
                        .HasColumnName("Slug");

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.HasIndex("TypeId");

                    b.ToTable("Notificators");

                    b.HasDiscriminator<int>("TypeId");
                });

            modelBuilder.Entity("Notify.Dal.Models.NotificatorTypeDal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<string>("Slug")
                        .HasColumnName("Slug");

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.ToTable("NotificatorTypes");

                    b.HasData(
                        new { Id = 2, Name = "Email", Slug = "email" },
                        new { Id = 1, Name = "Telegram", Slug = "telegram" }
                    );
                });

            modelBuilder.Entity("Notify.Dal.Models.TelegramNotificatorSettingsDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Token")
                        .HasColumnName("Token");

                    b.HasKey("Id");

                    b.ToTable("TelegramNotificatorSettings");
                });

            modelBuilder.Entity("Notify.Dal.Models.EmailNotificatorDal", b =>
                {
                    b.HasBaseType("Notify.Dal.Models.NotificatorDal");

                    b.Property<int>("SettingsId")
                        .HasColumnName("EmailSettingsId");

                    b.HasIndex("SettingsId")
                        .IsUnique();

                    b.ToTable("Notificators");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Notify.Dal.Models.TelegramNotificatorDal", b =>
                {
                    b.HasBaseType("Notify.Dal.Models.NotificatorDal");

                    b.Property<int>("SettingsId")
                        .HasColumnName("TelegramSettingsId");

                    b.HasIndex("SettingsId")
                        .IsUnique();

                    b.ToTable("Notificators");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Notify.Dal.Models.EmailNotificatorDal", b =>
                {
                    b.HasOne("Notify.Dal.Models.EmailNotificatorSettingsDal", "Settings")
                        .WithOne("Notificator")
                        .HasForeignKey("Notify.Dal.Models.EmailNotificatorDal", "SettingsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Notify.Dal.Models.TelegramNotificatorDal", b =>
                {
                    b.HasOne("Notify.Dal.Models.TelegramNotificatorSettingsDal", "Settings")
                        .WithOne("Notificator")
                        .HasForeignKey("Notify.Dal.Models.TelegramNotificatorDal", "SettingsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
