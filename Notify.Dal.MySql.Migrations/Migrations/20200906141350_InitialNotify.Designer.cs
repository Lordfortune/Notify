// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notify.Common.Enums;
using Notify.Dal.Mysql;

namespace Notify.Dal.MySql.Migrations.Migrations
{
    [DbContext(typeof(NotifyDbContext))]
    [Migration("20200906141350_InitialNotify")]
    partial class InitialNotify
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Notify.Dal.Models.ContactDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<int?>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("PersonId");

                    b.HasIndex("TypeId");

                    b.ToTable("Contacts");

                    b.HasDiscriminator<int>("TypeId");
                });

            modelBuilder.Entity("Notify.Dal.Models.Email.EmailNotificatorSettingsDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("DefaultSubject")
                        .HasColumnName("DefaultSubject");

                    b.Property<string>("Host")
                        .HasColumnName("Host");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("Password")
                        .HasColumnName("Password");

                    b.Property<int>("Port")
                        .HasColumnName("Port");

                    b.Property<string>("SenderAddress")
                        .HasColumnName("SenderAddress");

                    b.Property<string>("SenderName")
                        .HasColumnName("SenderName");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("EmailNotificatorSettings");
                });

            modelBuilder.Entity("Notify.Dal.Models.NotificationDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Message")
                        .HasColumnName("Message");

                    b.Property<int>("NotificatorContactId")
                        .HasColumnName("NotificatorContactId");

                    b.Property<int>("StatusId")
                        .HasColumnName("StatusId");

                    b.Property<string>("Subject")
                        .HasColumnName("Subject");

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("NotificatorContactId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Notifications");

                    b.HasDiscriminator<int>("TypeId");
                });

            modelBuilder.Entity("Notify.Dal.Models.NotificationStatusDal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<string>("Slug")
                        .HasColumnName("Slug");

                    b.HasKey("Id");

                    b.ToTable("NotificationStatuses");

                    b.HasData(
                        new { Id = 1, Description = "Создано", Name = "Created", Slug = "created" },
                        new { Id = 2, Description = "В обработке", Name = "Processing", Slug = "processing" },
                        new { Id = 3, Description = "Отправлено", Name = "Sent", Slug = "sent" },
                        new { Id = 4, Description = "Повторить", Name = "Retry", Slug = "retry" },
                        new { Id = 5, Description = "Ошибка", Name = "Error", Slug = "error" }
                    );
                });

            modelBuilder.Entity("Notify.Dal.Models.NotificationTypeDal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<string>("Slug")
                        .HasColumnName("Slug");

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.ToTable("NotificationTypes");

                    b.HasData(
                        new { Id = 2, Name = "Email", Slug = "email" },
                        new { Id = 1, Name = "Telegram", Slug = "telegram" }
                    );
                });

            modelBuilder.Entity("Notify.Dal.Models.NotificatorContactDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("ContactId")
                        .HasColumnName("ContactId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<int>("NotificatorId")
                        .HasColumnName("NotificatorId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("IsActive");

                    b.HasIndex("NotificatorId");

                    b.ToTable("NotificatorContacts");
                });

            modelBuilder.Entity("Notify.Dal.Models.NotificatorDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<string>("Slug")
                        .HasColumnName("Slug");

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Slug");

                    b.HasIndex("TypeId");

                    b.ToTable("Notificators");

                    b.HasDiscriminator<int>("TypeId");
                });

            modelBuilder.Entity("Notify.Dal.Models.PersonDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName");

                    b.Property<string>("MiddleName")
                        .HasColumnName("MiddleName");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Notify.Dal.Models.Telegram.TelegramChatDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("ChatTypeId")
                        .HasColumnName("ChatTypeId");

                    b.Property<long>("TelegramId")
                        .HasColumnName("TelegramId");

                    b.HasKey("Id");

                    b.HasIndex("ChatTypeId");

                    b.HasIndex("TelegramId");

                    b.ToTable("TelegramChatDal");

                    b.HasDiscriminator<int>("ChatTypeId");
                });

            modelBuilder.Entity("Notify.Dal.Models.Telegram.TelegramChatTypeDal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<string>("Slug")
                        .HasColumnName("Slug");

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.ToTable("TelegramChatTypes");
                });

            modelBuilder.Entity("Notify.Dal.Models.Telegram.TelegramNotificatorSettingsDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("Token")
                        .HasColumnName("Token");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("TelegramNotificatorSettings");
                });

            modelBuilder.Entity("Notify.Dal.Models.Email.EmailContactDal", b =>
                {
                    b.HasBaseType("Notify.Dal.Models.ContactDal");

                    b.Property<string>("Email")
                        .HasColumnName("Email");

                    b.HasIndex("Email");

                    b.ToTable("Contacts");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Notify.Dal.Models.Telegram.TelegramContactDal", b =>
                {
                    b.HasBaseType("Notify.Dal.Models.ContactDal");

                    b.Property<int>("ChatId")
                        .HasColumnName("ChatId");

                    b.Property<long>("TelegramId")
                        .HasColumnName("TelegramId");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.HasIndex("TelegramId");

                    b.ToTable("Contacts");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Notify.Dal.Models.Email.EmailNotificationDal", b =>
                {
                    b.HasBaseType("Notify.Dal.Models.NotificationDal");


                    b.ToTable("Notifications");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Notify.Dal.Models.Telegram.TelegramNotificationDal", b =>
                {
                    b.HasBaseType("Notify.Dal.Models.NotificationDal");


                    b.ToTable("Notifications");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Notify.Dal.Models.Email.EmailNotificatorDal", b =>
                {
                    b.HasBaseType("Notify.Dal.Models.NotificatorDal");

                    b.Property<int>("SettingsId")
                        .HasColumnName("EmailSettingsId");

                    b.HasIndex("SettingsId")
                        .IsUnique();

                    b.ToTable("Notificators");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Notify.Dal.Models.Telegram.TelegramNotificatorDal", b =>
                {
                    b.HasBaseType("Notify.Dal.Models.NotificatorDal");

                    b.Property<int>("SettingsId")
                        .HasColumnName("TelegramSettingsId");

                    b.HasIndex("SettingsId")
                        .IsUnique();

                    b.ToTable("Notificators");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Notify.Dal.Models.Telegram.TelegramGroupChatDal", b =>
                {
                    b.HasBaseType("Notify.Dal.Models.Telegram.TelegramChatDal");

                    b.Property<string>("Title")
                        .HasColumnName("Title");

                    b.ToTable("TelegramGroupChatDal");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Notify.Dal.Models.Telegram.TelegramPrivateChatDal", b =>
                {
                    b.HasBaseType("Notify.Dal.Models.Telegram.TelegramChatDal");

                    b.Property<int>("ContactPrivateId")
                        .HasColumnName("ContactPrivateId");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName");

                    b.Property<string>("Username")
                        .HasColumnName("Username");

                    b.HasIndex("ContactPrivateId");

                    b.HasIndex("Username");

                    b.ToTable("TelegramPrivateChatDal");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Notify.Dal.Models.ContactDal", b =>
                {
                    b.HasOne("Notify.Dal.Models.PersonDal", "Person")
                        .WithMany("Contacts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Notify.Dal.Models.NotificationTypeDal", "Type")
                        .WithMany("Contacts")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Notify.Dal.Models.NotificationDal", b =>
                {
                    b.HasOne("Notify.Dal.Models.NotificatorContactDal", "NotificatorContact")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificatorContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Notify.Dal.Models.NotificationStatusDal", "Status")
                        .WithMany("Notifications")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Notify.Dal.Models.NotificationTypeDal", "Type")
                        .WithMany("Notifications")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Notify.Dal.Models.NotificatorContactDal", b =>
                {
                    b.HasOne("Notify.Dal.Models.ContactDal", "Contact")
                        .WithMany("NotificatorContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Notify.Dal.Models.NotificatorDal", "Notificator")
                        .WithMany("NotificatorContacts")
                        .HasForeignKey("NotificatorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Notify.Dal.Models.NotificatorDal", b =>
                {
                    b.HasOne("Notify.Dal.Models.NotificationTypeDal", "Type")
                        .WithMany("Notificators")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Notify.Dal.Models.Telegram.TelegramChatDal", b =>
                {
                    b.HasOne("Notify.Dal.Models.Telegram.TelegramChatTypeDal", "ChatType")
                        .WithMany("Chats")
                        .HasForeignKey("ChatTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Notify.Dal.Models.Telegram.TelegramContactDal", b =>
                {
                    b.HasOne("Notify.Dal.Models.Telegram.TelegramChatDal", "Chat")
                        .WithOne("Contact")
                        .HasForeignKey("Notify.Dal.Models.Telegram.TelegramContactDal", "ChatId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Notify.Dal.Models.Email.EmailNotificatorDal", b =>
                {
                    b.HasOne("Notify.Dal.Models.Email.EmailNotificatorSettingsDal", "Settings")
                        .WithOne("Notificator")
                        .HasForeignKey("Notify.Dal.Models.Email.EmailNotificatorDal", "SettingsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Notify.Dal.Models.Telegram.TelegramNotificatorDal", b =>
                {
                    b.HasOne("Notify.Dal.Models.Telegram.TelegramNotificatorSettingsDal", "Settings")
                        .WithOne("Notificator")
                        .HasForeignKey("Notify.Dal.Models.Telegram.TelegramNotificatorDal", "SettingsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
